<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!-- START SNIPPET: example -->
<beans
  xmlns="http://www.springframework.org/schema/beans"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="SkladServer" dataDirectory="${activemq.data}" schedulePeriodForDestinationPurge="10000" 
schedulerSupport="true">

     <!--
            Use VM cursor
            For more information, see:
            http://activemq.apache.org/message-cursors.html
        -->
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic=">" producerFlowControl="true" >
                  <pendingSubscriberPolicy>
                    <vmCursor />
                  </pendingSubscriberPolicy>
                </policyEntry>
                <policyEntry queue=">" prioritizedMessages="true" producerFlowControl="true" gcInactiveDestinations="true" inactiveTimoutBeforeGC="60000">
                  <deadLetterStrategy>
            <!--
              Use the prefix 'DLQ.' for the destination name, and make
              the DLQ a queue rather than a topic
            -->
            <individualDeadLetterStrategy  queuePrefix="DLQ." useQueueForQueueMessages="true" processExpired="false"/>
          </deadLetterStrategy>

                  <pendingQueuePolicy>
                    <vmQueueCursor/>
                  </pendingQueuePolicy>
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>


        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext connectorHost="0.0.0.0" connectorPort="2011" createConnector="true" />
        </managementContext>


	<networkConnectors>
		<networkConnector name="Sklad_2_OBS" id="Sklad_2_OBS" uri="static:(tcp://192.168.1.213:61616,tcp://192.168.11.3:61616)"
			networkTTL="3"
			conduitSubscriptions="false"
		>
			<excludedDestinations>
				<queue physicalName="always.include.queue_stat" />
				<queue physicalName="dead_213" />
				<queue physicalName="pg_queue_check_addr" />
				<queue physicalName="pg_queue_houses" />
				<queue physicalName="pg_queue_streets" />
				<queue physicalName="pg_queue_houses_reply_*" />
				<queue physicalName="pg_queue_streets_reply_*" />
				<queue physicalName="queue_send_to_foxpro" />
				<queue physicalName="queue_delete_photos_one" />
				<queue physicalName="queue_send_zakaz" />
				<queue physicalName="queue_smsgate" />
				<queue physicalName="queue_smsgate_good_exist" />
				<queue physicalName="queue_update_photos" />
				<queue physicalName="queue_update_photos_one" />
				<queue physicalName="statistic:pgsql" />
				<queue physicalName="statistic:mongo" />
				<queue physicalName="queue_update_goods" />
				<queue physicalName="queue_update_kolvo" />
			</excludedDestinations>
		</networkConnector>
	</networkConnectors>


        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb" enableJournalDiskSyncs="false"/>
        </persistenceAdapter>
        <plugins>
         <discardingDLQBrokerPlugin dropAll="true" dropTemporaryTopics="true" dropTemporaryQueues="true" />
         <statisticsBrokerPlugin/>
        </plugins>


        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
<transportConnector name="openwire" enableStatusMonitor="true" uri="tcp://0.0.0.0:61616"/>
<transportConnector name="stomp" enableStatusMonitor="true" uri="stomp://0.0.0.0:61612?transport.defaultHeartBeat=5000,0"/>
 <transportConnector name="stomp+nio" enableStatusMonitor="true" uri="stomp+nio://0.0.0.0:61613?transport.defaultHeartBeat=5000,0"/>
<transportConnector name="xmpp" enableStatusMonitor="true" uri="xmpp://0.0.0.0:61222"/>
  <transportConnector name="websocket" enableStatusMonitor="true" uri="ws://0.0.0.0:61614?transport.defaultHeartBeat=5000,0"/>
        </transportConnectors>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
    -->
    <import resource="camel.xml"/>
    <import resource="jetty.xml"/>

</beans>
<!-- END SNIPPET: example -->
